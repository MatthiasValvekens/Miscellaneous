		for(Rule r: getRules()){
			if(r.getOutput().size()!=0) continue;
			String inputvar=r.getInput().get(0);
			newrules.remove(r);
			
			for(Rule s: getRules()){
				//find all occurences of the symbol in question
				ArrayList<Integer> indices=new ArrayList<Integer>();
				List<String> outputs=s.getOutput();
				for(int i =0; i<outputs.size();i++){
					if(outputs.get(i).equals(inputvar)) indices.add(i); 
				}
				//add all possible combinations
				int placecount=indices.size();
				if(placecount==0) continue;
				for(long j = 0; j<Math.pow(2,placecount); j++){
					ArrayList<String> newout =new ArrayList<String>();
					for(int k = 0; k<placecount;k++){
						int previous=(k!=0 ? indices.get(k-1)+1:0);
						//append the part preceding the current location
						newout.addAll(outputs.subList(previous, indices.get(k)));
						//check if bit k of j is on
						if((j&(1L<<k))!=0) newout.add(inputvar);
					}
					newout.addAll(outputs.subList(indices.get(placecount-1)+1,outputs.size()));
					//finished constructing output string, append rule now
					newrules.add(new Rule(s.getInput(),newout));
				}
			}
		}